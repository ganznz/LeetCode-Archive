/*
* BFS implementation
*/

const numberOfIslands = grid => {
    const gridHeight = grid.length;
    const gridLength = grid[0].length; // constraint {1 <= m, n <= 300} makes this safe
    let numOfIslands = 0;
    let visited = new Map();

    const bfs = ([r, c]) => {
        const queue = [];
        queue.push([r, c]); // push root onto queue
        visited.set(`${r},${c}`, true);

        while (queue.length !== 0) {
            const coords = queue.shift();
            const currR = coords[0];
            const currC = coords[1];
            // check above
            if (currR-1 >= 0 && !visited.has(`${currR-1},${currC}`) && grid[currR-1][currC] !== "0") {
                queue.push([currR-1, currC]);
                visited.set(`${currR-1},${currC}`, true);
            }
            // check below
            if (currR+1 < gridHeight && !visited.has(`${currR+1},${currC}`) && grid[currR+1][currC] !== "0") {
                queue.push([currR+1, currC]);
                visited.set(`${currR+1},${currC}`, true);
            }
            // check right
            if (currC+1 < gridLength && !visited.has(`${currR},${currC+1}`) && grid[currR][currC+1] !== "0") {
                queue.push([currR, currC+1]);
                visited.set(`${currR},${currC+1}`, true);
            }
            // check left
            if (currC-1 >= 0 && !visited.has(`${currR},${currC-1}`) && grid[currR][currC-1] !== "0") {
                queue.push([currR, currC-1]);
                visited.set(`${currR},${currC-1}`, true);
            }
        }
        numOfIslands++;
    }

    for (let r = 0; r < gridHeight; r++) {
        for (let c = 0; c < gridLength; c++) {
            if (grid[r][c] == "0" || visited.has(`${r},${c}`)) continue;
            bfs([r, c]);
        }
    }

    return numOfIslands;

}

numberOfIslands([
    ["1","1","1"],
    ["0","1","0"],
    ["1","1","1"]
])
// expected output: 1

numberOfIslands([
    ["1","1","1","1","0"],
    ["1","1","0","1","0"],
    ["1","1","0","0","0"],
    ["0","0","0","0","0"]
])
// expected output: 1

numberOfIslands([
    ["1","1","0","0","0"],
    ["1","1","0","0","0"],
    ["0","0","1","0","0"],
    ["0","0","0","1","1"]
])
// expected output: 3

numberOfIslands([
    ["1", "0", "0", "1", "1", "1", "0", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
    ["1", "0", "0", "1", "1", "0", "0", "1", "0", "0", "0", "1", "0", "1", "0", "1", "0", "0", "1", "0"],
    ["0", "0", "0", "1", "1", "1", "1", "0", "1", "0", "1", "1", "0", "0", "0", "0", "1", "0", "1", "0"],
    ["0", "0", "0", "1", "1", "0", "0", "1", "0", "0", "0", "1", "1", "1", "0", "0", "1", "0", "0", "1"],
    ["0", "0", "0", "0", "0", "0", "0", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
    ["1", "0", "0", "0", "0", "1", "0", "1", "0", "1", "1", "0", "0", "0", "0", "0", "0", "1", "0", "1"],
    ["0", "0", "0", "1", "0", "0", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1"],
    ["0", "0", "0", "1", "0", "1", "0", "0", "1", "1", "0", "1", "0", "1", "1", "0", "1", "1", "1", "0"],
    ["0", "0", "0", "0", "1", "0", "0", "1", "1", "0", "0", "0", "0", "1", "0", "0", "0", "1", "0", "1"],
    ["0", "0", "1", "0", "0", "1", "0", "0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "0", "1", "0"],
    ["1", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1", "0", "1", "0", "1", "0"],
    ["0", "1", "0", "0", "0", "1", "0", "1", "0", "1", "1", "0", "1", "1", "1", "0", "1", "1", "0", "0"],
    ["1", "1", "0", "1", "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0", "1"],
    ["0", "1", "0", "0", "1", "1", "1", "0", "0", "0", "1", "1", "1", "1", "1", "0", "1", "0", "0", "0"],
    ["0", "0", "1", "1", "1", "0", "0", "0", "1", "1", "0", "0", "0", "1", "0", "1", "0", "0", "0", "0"],
    ["1", "0", "0", "1", "0", "1", "0", "0", "0", "0", "1", "0", "0", "0", "1", "0", "1", "0", "1", "1"],
    ["1", "0", "1", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0", "1", "0", "1", "0", "0", "0", "0"],
    ["0", "1", "1", "0", "0", "0", "1", "1", "1", "0", "1", "0", "1", "0", "1", "1", "1", "1", "0", "0"],
    ["0", "1", "0", "0", "0", "0", "1", "1", "0", "0", "1", "0", "1", "0", "0", "1", "0", "0", "1", "1"],
    ["0", "0", "0", "0", "0", "0", "1", "1", "1", "1", "0", "1", "0", "0", "0", "1", "1", "0", "0", "0"]
])
// expected output: 58